import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats

dataFile = 'D:/workspace/semantic-matching/Python/candidate.dat'
humanRank = 'D:/workspace/semantic-matching/Python/humanRank.dat'

data = np.loadtxt(dataFile)
dataT = data.transpose()
wSum = dataT[0:99]
wProduct = dataT[99:198]

def countRanks(ranks):
    """
    count the particular rank numbers generated by single algorithm.
    """
    i = 0
    counts = []
    counts.append(i)
    while i < 99:
        k = i
        for j in range(i,99):
            rCor = stats.stats.kendalltau(ranks[i], ranks[j])[0] 
            if rCor > 0.999999:
                k = k + 1
        i = k
        if k < 99:
            counts.append(k)
    return counts

def printRanks(sim):
    """
    print the natural order based on the input similairty list
    """
    rankList = []
    for i in range(9):
        rank = 0
        for j in range(9):
            if sim[i] <= sim[j]:
                rank = rank + 1
        rankList.append(rank)
    return rankList

def createTable(index, data):
    result = {}
    for i in range(len(index)):
        rank = printRanks(data[index[i]])
        result[index[i]] = rank
    return pd.DataFrame(result,columns=index)


#iSum = countRanks(wSum)
#iProduct = countRanks(wProduct)
#print createTable(iSum,wSum)
#print createTable(iProduct,wProduct)

humanData = pd.read_table(humanRank)
humanCol = list(humanData.columns)

x = np.linspace(0.01,0.99,99,True)

def compareCorrelation(algorithm,human):
    """
    compare correlation with human and algorithm in candidate dataset.
    """
    correlations = []
    for i in range(99):
        cor = stats.stats.kendalltau(algorithm[i],human)[0]
        correlations.append(cor)
    return correlations

humans = []

for i in range(12):
    human = humanData[humanCol[i]]
    human = 1 - human*1.0/max(human)
    humans.append(human)


plt.rc('figure',figsize=(20,20))
font_options = {'size':11}
plt.rc('font',**font_options)
fig,axes = plt.subplots(3,4)


for i in range(12):
    k = i/4
    j = i%4
    resultS = compareCorrelation(wSum,humans[i])
    resultP = compareCorrelation(wProduct,humans[i])
    axes[k,j].plot(x,resultS,label="sum",color="blue",alpha=0.7, linewidth=2,linestyle='-')
    axes[k,j].plot(x,resultP,label="product",color="green",alpha=0.7,linewidth=2,linestyle='-')
    axes[k,j].set_xlabel(r"$\alpha$",fontsize=12)
    axes[k,j].set_ylabel("Rank Correlation", fontsize=12)
    title = "HC"+str(i+1)
    axes[k,j].set_title(title, fontsize=14)
    axes[k,j].set_ylim([0.4,1.2])
    axes[k,j].legend(loc='best')

plt.savefig('D:/workspace/semantic-matching/Python/candidateEvaluation.pdf',bbox_inches='tight')

